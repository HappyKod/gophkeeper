// Code generated by MockGen. DO NOT EDIT.
// Source: internal/keeperstorage/storage.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	models "yudinsv/gophkeeper/internal/models"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockKeeperStorage is a mock of KeeperStorage interface.
type MockKeeperStorage struct {
	ctrl     *gomock.Controller
	recorder *MockKeeperStorageMockRecorder
}

// MockKeeperStorageMockRecorder is the mock recorder for MockKeeperStorage.
type MockKeeperStorageMockRecorder struct {
	mock *MockKeeperStorage
}

// NewMockKeeperStorage creates a new mock instance.
func NewMockKeeperStorage(ctrl *gomock.Controller) *MockKeeperStorage {
	mock := &MockKeeperStorage{ctrl: ctrl}
	mock.recorder = &MockKeeperStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeeperStorage) EXPECT() *MockKeeperStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKeeperStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKeeperStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKeeperStorage)(nil).Close))
}

// DeleteSecret mocks base method.
func (m *MockKeeperStorage) DeleteSecret(ctx context.Context, secretID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", ctx, secretID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockKeeperStorageMockRecorder) DeleteSecret(ctx, secretID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockKeeperStorage)(nil).DeleteSecret), ctx, secretID)
}

// GetSecret mocks base method.
func (m *MockKeeperStorage) GetSecret(ctx context.Context, secretID uuid.UUID) (models.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", ctx, secretID)
	ret0, _ := ret[0].(models.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockKeeperStorageMockRecorder) GetSecret(ctx, secretID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockKeeperStorage)(nil).GetSecret), ctx, secretID)
}

// Ping mocks base method.
func (m *MockKeeperStorage) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockKeeperStorageMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockKeeperStorage)(nil).Ping))
}

// PutSecret mocks base method.
func (m *MockKeeperStorage) PutSecret(ctx context.Context, secret models.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSecret", ctx, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutSecret indicates an expected call of PutSecret.
func (mr *MockKeeperStorageMockRecorder) PutSecret(ctx, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSecret", reflect.TypeOf((*MockKeeperStorage)(nil).PutSecret), ctx, secret)
}

// SyncSecret mocks base method.
func (m *MockKeeperStorage) SyncSecret(ctx context.Context, userID string) ([]models.LiteSecret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncSecret", ctx, userID)
	ret0, _ := ret[0].([]models.LiteSecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncSecret indicates an expected call of SyncSecret.
func (mr *MockKeeperStorageMockRecorder) SyncSecret(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncSecret", reflect.TypeOf((*MockKeeperStorage)(nil).SyncSecret), ctx, userID)
}
